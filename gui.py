
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer



from pathlib import Path
from tkinter import Tk, Canvas, Text, Button, PhotoImage, filedialog, Frame,Widget
from fonction_ia import * 
from PIL import Image
import torch
import pandas as pd
import plotly.graph_objects as go



# Renommer les colonnes si nécessaire


def truncate_text(text, max_length=80):
    if isinstance(text, str) and len(text) > max_length:
        return text[:max_length] + '...'
    elif isinstance(text,float):
        return round(text,3)
    return text

def to_table(nametable: str, df: pd.DataFrame):
    df.rename(columns={'index': 'nom \\catégorie'}, inplace=True)

    # Appliquer le troncage aux valeurs du DataFrame
    truncated_df = df.applymap(lambda x: truncate_text(x) )
    truncated_df.index = [truncate_text(idx) for idx in df.index]

    fig = go.Figure(data=[go.Table(
        header=dict(
            values=[''] + list(truncated_df.columns),  # Ajouter un en-tête vide pour les index
            fill_color='#242537',  # Couleur de fond de l'en-tête
            font=dict(color='white'),  # Couleur du texte de l'en-tête
            line_color='#242537',  # Couleur du bord de l'en-tête
            align='left'
        ),
        cells=dict(
            values=[[i for i in truncated_df.index]] + [truncated_df[col] for col in truncated_df.columns],  # Ajouter les valeurs des index
            fill_color='#656F88',  # Couleur de fond des cellules
            font=dict(color='#FFFFFF'),  # Couleur du texte des cellules
            line_color='#242537',  # Couleur du bord des cellules
            align='left'
        )
    )])

    fig.update_layout(
        autosize=False,
        width=1000*resize_ratio_width,  # Largeur de l'image
        height=750*resize_image_height,  # Hauteur de l'image
        plot_bgcolor='#373951',  # Changez cette couleur pour le fond autour du tableau
        paper_bgcolor='#373951'  # Changez cette couleur pour le fond autour du tableau
    )

    # Sauvegarder le tableau sous forme d'image
    fig.write_image(relative_to_assets(nametable))





OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / "assets" / "frame0"


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)
a = None
neighbors = None
def start():
    global text,a,image_plot,image_image_plot,neighbors,liste_centre
    if text:
        pred,prob,neighbors = input_new_text(text)
        print(pred,prob)
        #On concate ligne de prédiction et proba
        new_row_df = pd.DataFrame([prob[0]],columns=pred.columns)
        df = pd.concat([pred, new_row_df], ignore_index=True)
        df.index = ["Prédiction","Probabilité"]
        # On creer le tableau
        to_table("tableauPred.png",df)
        # On l'affiche
        size = 1000
        if not df.empty:
            clear_centre()


            a = create_canvas_with_text_and_image(canvas,"Ia faite avec succès","image_3.png",325*resize_ratio_width,934.0)
            imagee = cut_bottom_third(relative_to_assets("tableauPred.png"))
            imagee.save(relative_to_assets("tableauPred.png"))
            resize_image(relative_to_assets("tableauPred.png"),relative_to_assets("tableauPred.png"),max_width=size)
            image_image_plot = PhotoImage(
            file=relative_to_assets("tableauPred.png"))
            image_plot = canvas.create_image(
            907.0*resize_ratio_width,
            547.0*resize_image_height,
            image=image_image_plot
            )
            if image_plot not in liste_centre:
                liste_centre.append(image_plot)            
        else:
            a = create_canvas_with_text_and_image(canvas,"Erreur lors du traitement de l'ia","image_4.png",385*resize_ratio_width,934.0*resize_image_height)

def sum_column_names(row):
    global df_last_9_columns
    return [col for col in df_last_9_columns.columns if row[col] == 1]

def voisin_cosine():
    global image_image_plot,image_plot,df_last_9_columns
    print(neighbors)
    if type(neighbors)!=None:
        df_last_9_columns = neighbors.iloc[:, -9:]
        df_last_9_columns['Summed_Columns'] = df_last_9_columns.apply(sum_column_names, axis=1)
        selected_colomn = [neighbors['cosine_similarity'],neighbors['claim'],df_last_9_columns['Summed_Columns']]
        new_df = pd.concat(selected_colomn, axis=1)
        clear_centre()
        to_table("voisinCosine.png",new_df)

        size = 1000
        imagee = cut_bottom_third(relative_to_assets("voisinCosine.png"),0.20)
        imagee.save(relative_to_assets("voisinCosine.png"))
        resize_image(relative_to_assets("voisinCosine.png"),relative_to_assets("voisinCosine.png"),max_width=int(size*resize_image_height))
        image_image_plot = PhotoImage(
        file=relative_to_assets("voisinCosine.png"))
        image_plot = canvas.create_image(
        907.0*resize_ratio_width,
        500.0*resize_image_height,
        image=image_image_plot
        )
        if image_plot not in liste_centre:
            liste_centre.append(image_plot)  



    


def hide_element(element):
    if isinstance(element, Widget):
        try:
            element.place_forget()
        except Exception:
            pass
        try:
            element.pack_forget()
        except Exception:
            pass
        try:
            element.grid_forget()
        except Exception:
            pass
    else:
        try:
            canvas.itemconfig(element, state='hidden')
        except Exception as e:
            print(f"Erreur lors de la tentative de cacher l'élément: {e}")

image_image_3,image_3,image_text = None,None,None
def create_canvas_with_text_and_image( canvas, text, image_path,x,y):
    global image_image_3,image_3,image_text
    canvas.delete(image_text)
    canvas.delete(image_3)
    image_text = canvas.create_text(
        x,
        y,
        anchor="nw",
        text=text,
        fill="#FFFFFF",
        font=("Inter SemiBold", 24 * -1)
    )
    image_image_3 = PhotoImage(file=relative_to_assets(image_path))
    image_3 = canvas.create_image(
        x-50,
        y+10,
        image=image_image_3
    )
    return [image_3,image_text]  # returning image to keep a reference

def resize_image(image_path, output_path, max_width=1500):
    # Ouvrir l'image
    with Image.open(image_path) as img:
        print("image ouverte")
        # Obtenir les dimensions d'origine
        original_width, original_height = img.size
        
        # Vérifier si le redimensionnement est nécessaire
        if original_width != max_width:
            # Calculer le nouveau rapport d'aspect
            aspect_ratio = original_height / original_width
            new_width = max_width
            new_height = int(new_width * aspect_ratio)
            
            # Redimensionner l'image
            resized_img = img.resize((new_width, new_height), Image.Resampling.LANCZOS)
            
            # Sauvegarder l'image redimensionnée
            resized_img.save(output_path)
            print(f"Image redimensionnée et sauvegardée sous {output_path}")
        else:
            print("La largeur de l'image est déjà inférieure ou égale à 1000 pixels. Aucun redimensionnement nécessaire.")


#def start(): # 5 brevet les plus proche , la prediction , un pourcentage 
#   pass


def clear_centre():
    global liste_centre
    for i in liste_centre:
        hide_element(i)

def home():
    clear_centre()
    button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
    button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_2 clicked"),
    relief="flat"
    )
    button_2.place(
    x=604.0*resize_ratio_width,
    y=353.0*resize_image_height,
    width=494.0*resize_ratio_width,
    height=313.0*resize_image_height
    )
    image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
    image_2 = canvas.create_image(
    907.0*resize_ratio_width,
    547.0*resize_image_height,
    image=image_image_2
    )


def get_image_width(image_path):
    # Ouvrir l'image
    with Image.open(image_path) as img:
        # Obtenir les dimensions
        width, height = img.size
        return width

def show_graph_knn():
    global image_image_plot,image_plot
    clear_centre()
    nb = get_image_width(relative_to_assets("newplot.png"))
    size = 1250*resize_ratio_width
    if nb != size:
        resize_image(relative_to_assets("newplot.png"),relative_to_assets("newplot.png"),max_width=int(size*resize_image_height))

    image_image_plot = PhotoImage(
    file=relative_to_assets("newplot.png"))
    image_plot = canvas.create_image(
    907.0*resize_ratio_width,
    547.0*resize_image_height,
    image=image_image_plot
    )
    if image_plot not in liste_centre:
        liste_centre.append(image_plot)

def cut_bottom_third(image_path,quantity=0.33):
    pil_image = Image.open(relative_to_assets(image_path))
    width, height = pil_image.size
    new_height = int(height * (1-quantity))
    cropped_image = pil_image.crop((0, 0, width, new_height))
    return cropped_image

txt10 = None
text= ""
def import_file():
    global button_image_2, image_2,liste_centre,a,text,txt10
    file_path = filedialog.askopenfilename(
        filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")]
    )
    if file_path:
        print(f"Fichier importé: {file_path}")
        path = file_path  # Utilisez cette variable selon vos besoins
        text = read_text_file(path)
        if text:
            txt10 = canvas.create_text(
            700.0*resize_ratio_width,
            840.0*resize_image_height,
            anchor="nw",
            text=file_path,
            fill="#FFFFFF",
            font=("Inter SemiBold", 16 * -1)
            )

            a = create_canvas_with_text_and_image(canvas,"Texte Importé avec succès","image_3.png",325*resize_ratio_width,934.0*resize_image_height)
            
            clear_centre()
            button_2.place_forget()
            canvas.itemconfig(image_2, state='hidden')
            canvas.delete(rect1)
            canvas.delete(txt1)
            canvas.delete(rect2)
            display_text(text)
        else:
            a = create_canvas_with_text_and_image(canvas,"Erreur d'importation du texte","image_4.png",325*resize_ratio_width,934.0*resize_image_height)


def read_text_file(file_path: str) -> str:
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            content = file.read()
        return content
    except FileNotFoundError:
        print(f"Erreur : Le fichier {file_path} n'a pas été trouvé.")
        return ""
    except IOError:
        print(f"Erreur : Impossible de lire le fichier {file_path}.")
        return ""

def calculate():
    global contenue
    if len(contenue)!=0:
        pass
        



def display_text(content: str):
    global text_widget,contenue,liste_centre
    text_widget = Text(
        canvas,
        wrap="word",
        font=("Inter", 16),
        bg="#28293D",
        fg="#FFFFFF",
        height=int(24*resize_image_height),  # Adjust height to fit within 500 pixels
        width=int(100*resize_ratio_width) # Adjust width as needed
    )
    text_widget.insert("1.0", content)
    text_widget.place(
        x=int(370.0*resize_ratio_width),
        y=int(220.0*resize_image_height)
    )
    text_widget.configure(state="disabled")  # Make text read-only
    liste_centre.append(text_widget)


def resize_images_in_folder(folder_path, ratio):
    """
    Redimensionne toutes les images dans un dossier spécifié par un ratio.

    Args:
    folder_path (str): Chemin vers le dossier contenant les images.
    ratio (float): Ratio de redimensionnement (ex : 0.5 pour réduire de 50%).
    """
    # Parcourir tous les fichiers dans le dossier
    for filename in os.listdir(folder_path):
        # Construction du chemin complet vers l'image
        file_path = os.path.join(folder_path, filename)
        print("Le NOM EST ",filename)
        # Vérifier si le fichier est une image (simplifié ici par l'extension)
        if file_path.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp', '.gif')):
            # Ouvrir l'image
            with Image.open(file_path) as img:
                # Calculer les nouvelles dimensions
                if filename=="button_1.png":
                    if img.width!=113:
                        print("deja modifié")
                        return 0
            
                print(ratio," RATIOOOOOO")
                new_width = int(img.width * ratio)
                new_height = int(img.height * ratio)
                print(img.width,img.height)
                print(new_width,new_height)
                # Redimensionner l'image
                resized_img = img.resize((new_width, new_height), Image.Resampling.LANCZOS)
                
                # Sauvegarder l'image redimensionnée
                resized_img.save(file_path)
                print(f"Image {filename} redimensionnée à {new_width}x{new_height}")

# Utiliser la fonction



window = Tk()
width = int(window.winfo_screenwidth() ) # Utiliser 50% de la largeur de l'écran
height = int(window.winfo_screenheight())  # Utiliser 50% de la hauteur de l'écran

print(width,height,"ORIGINALE")


if width!= 1920:
    folder_path = ASSETS_PATH
    resize_ratio_width = width/1920  
    resize_image_height = height/1080
    print('estoijloestiojtlseoijtlesojt ',resize_ratio_width,resize_image_height)
    resize_images_in_folder(folder_path, resize_ratio_width)
else:
    resize_ratio_width = 1
    resize_image_height = 1
geometryy = str(width)+"x"+str(height)
window.geometry(geometryy)
window.configure(bg = "#373951")


canvas = Canvas(
    window,
    bg = "#373951",
    height = 1080*resize_image_height,
    width = 1920*resize_ratio_width,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)


canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    0.0,
    0.0,
    1920.0*resize_ratio_width,
    1080.0*resize_image_height,
    fill="#28293D",
    outline="")

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    920.0*resize_ratio_width,
    578.0*resize_image_height,
    image=image_image_1
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    907.0*resize_ratio_width,
    547.0*resize_image_height,
    image=image_image_2
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: start(),
    relief="flat"
)
button_1.place(
    x=1477.0*resize_ratio_width,
    y=924.0*resize_image_height,
    width=113.0*resize_ratio_width,
    height=48.0*resize_image_height
)




succesImage = []




button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: import_file(),
    relief="flat"
)
button_2.place(
    x=450.0*resize_ratio_width,
    y=250.0*resize_image_height,
    width=862.0*resize_ratio_width,
    height=374.0*resize_image_height
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    851.0*resize_ratio_width,
    848.0*resize_image_height,
    image=image_image_5
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: import_file(),
    relief="flat"
)
button_3.place(
    x=1125.0*resize_ratio_width,
    y=822.0*resize_image_height,
    width=103.0*resize_ratio_width,
    height=52.0*resize_image_height
)

rect1 = canvas.create_rectangle(
    592.0*resize_ratio_width,
    793.0*resize_image_height,
    880.0*resize_ratio_width,
    798.0*resize_image_height,
    fill="#4B4D62",
    outline="")

txt1 = canvas.create_text(
    895.0*resize_ratio_width,
    778.0*resize_image_height,
    anchor="nw",
    text="or",
    fill="#FFFFFF",
    font=("Inter SemiBold", 16 * -1)
)

rect2 = canvas.create_rectangle(
    934.0*resize_ratio_width,
    793.0*resize_image_height,
    1222.0*resize_ratio_width,
    798.0*resize_image_height,
    fill="#4B4D62",
    outline="")

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    439.0*resize_ratio_width,
    50.0*resize_image_height,
    image=image_image_6
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: voisin_cosine(),
    relief="flat"
)
button_4.place(
    x=594.0*resize_ratio_width,
    y=26.0*resize_image_height,
    width=196.0*resize_ratio_width,
    height=48.0*resize_image_height
)

button_image_5 = PhotoImage(
    file=relative_to_assets("button_5.png"))
button_5 = Button(
    image=button_image_5,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: show_graph_knn(),
    relief="flat"
)
button_5.place(
    x=341.0*resize_ratio_width,
    y=26.0*resize_image_height,
    width=196.0*resize_ratio_width,
    height=48.0*resize_image_height
)

button_image_6 = PhotoImage(
    file=relative_to_assets("button_6.png"))
button_6 = Button(
    image=button_image_6,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: clear_centre(),
    relief="flat"
)
button_6.place(
    x=74.0*resize_ratio_width,
    y=26.0*resize_image_height,
    width=196.0*resize_ratio_width,
    height=48.0*resize_image_height
)


liste_centre = [button_2,image_2]
window.resizable(False, False)
window.mainloop()
